{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\", \"label\", \"isRequired\", \"password\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport { Input, Button, Icon, FormControl } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport { Ionicons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar defaultProps = {\n  label: '',\n  isRequired: false,\n  password: false\n};\nexport default function TextField(props) {\n  var name = props.name,\n      label = props.label,\n      isRequired = props.isRequired,\n      password = props.password,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(password),\n      _useState2 = _slicedToArray(_useState, 2),\n      textHidden = _useState2[0],\n      setTextHidden = _useState2[1];\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var _useFormikContext = useFormikContext(),\n      handleChange = _useFormikContext.handleChange,\n      handleBlur = _useFormikContext.handleBlur,\n      setFieldTouched = _useFormikContext.setFieldTouched;\n\n  return _jsxs(FormControl, {\n    isRequired: isRequired,\n    isInvalid: Boolean(meta.error),\n    children: [_jsx(FormControl.Label, {\n      children: label\n    }), _jsx(Input, _objectSpread(_objectSpread({\n      testID: \"textfield-input\",\n      type: textHidden ? 'password' : 'text',\n      value: field.value\n    }, rest), {}, {\n      InputRightElement: password ? _jsx(Button, {\n        variant: \"ghost\",\n        leftIcon: _jsx(Icon, {\n          as: Ionicons,\n          name: textHidden ? 'eye' : 'eye-off',\n          size: \"xs\"\n        }),\n        onPress: function onPress() {\n          return setTextHidden(!textHidden);\n        }\n      }) : undefined,\n      onChangeText: handleChange(name),\n      onBlur: function onBlur() {\n        setFieldTouched(name);\n        handleBlur(name);\n      }\n    })), meta.error && _jsx(FormControl.ErrorMessage, {\n      children: meta.error\n    })]\n  });\n}\nTextField.defaultProps = defaultProps;","map":{"version":3,"sources":["/Users/jonathangan/Desktop/marriageRNapp/components/common/form/TextField.tsx"],"names":["React","useState","Input","Button","Icon","FormControl","useField","useFormikContext","Ionicons","defaultProps","label","isRequired","password","TextField","props","name","rest","textHidden","setTextHidden","field","meta","handleChange","handleBlur","setFieldTouched","Boolean","error","value","undefined"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,WAA3C,QAA8D,aAA9D;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;AACA,SAASC,QAAT,QAAyB,oBAAzB;;;AASA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0C;AACvD,MAAQC,IAAR,GAAuDD,KAAvD,CAAQC,IAAR;AAAA,MAAcL,KAAd,GAAuDI,KAAvD,CAAcJ,KAAd;AAAA,MAAqBC,UAArB,GAAuDG,KAAvD,CAAqBH,UAArB;AAAA,MAAiCC,QAAjC,GAAuDE,KAAvD,CAAiCF,QAAjC;AAAA,MAA8CI,IAA9C,4BAAuDF,KAAvD;;AACA,kBAAoCb,QAAQ,CAACW,QAAD,CAA5C;AAAA;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AACA,kBAAsBZ,QAAQ,CAACS,IAAD,CAA9B;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,IAAd;;AACA,0BAAsDb,gBAAgB,EAAtE;AAAA,MAAQc,YAAR,qBAAQA,YAAR;AAAA,MAAsBC,UAAtB,qBAAsBA,UAAtB;AAAA,MAAkCC,eAAlC,qBAAkCA,eAAlC;;AAEA,SACE,MAAC,WAAD;AAAa,IAAA,UAAU,EAAEZ,UAAzB;AAAqC,IAAA,SAAS,EAAEa,OAAO,CAACJ,IAAI,CAACK,KAAN,CAAvD;AAAA,eACE,KAAC,WAAD,CAAa,KAAb;AAAA,gBAAoBf;AAApB,MADF,EAEE,KAAC,KAAD;AACE,MAAA,MAAM,EAAC,iBADT;AAEE,MAAA,IAAI,EAAEO,UAAU,GAAG,UAAH,GAAgB,MAFlC;AAGE,MAAA,KAAK,EAAEE,KAAK,CAACO;AAHf,OAIMV,IAJN;AAKE,MAAA,iBAAiB,EACfJ,QAAQ,GACN,KAAC,MAAD;AACE,QAAA,OAAO,EAAC,OADV;AAEE,QAAA,QAAQ,EACN,KAAC,IAAD;AACE,UAAA,EAAE,EAAEJ,QADN;AAEE,UAAA,IAAI,EAAES,UAAU,GAAG,KAAH,GAAW,SAF7B;AAGE,UAAA,IAAI,EAAC;AAHP,UAHJ;AASE,QAAA,OAAO,EAAE;AAAA,iBAAMC,aAAa,CAAC,CAACD,UAAF,CAAnB;AAAA;AATX,QADM,GAYJU,SAlBR;AAoBE,MAAA,YAAY,EAAEN,YAAY,CAACN,IAAD,CApB5B;AAqBE,MAAA,MAAM,EAAE,kBAAM;AACZQ,QAAAA,eAAe,CAACR,IAAD,CAAf;AACAO,QAAAA,UAAU,CAACP,IAAD,CAAV;AACD;AAxBH,OAFF,EA4BGK,IAAI,CAACK,KAAL,IACC,KAAC,WAAD,CAAa,YAAb;AAAA,gBAA2BL,IAAI,CAACK;AAAhC,MA7BJ;AAAA,IADF;AAkCD;AAEDZ,SAAS,CAACJ,YAAV,GAAyBA,YAAzB","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState } from 'react';\nimport { Input, IInputProps, Button, Icon, FormControl } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface TextFieldProps extends IInputProps {\n  name: string;\n  label?: string;\n  isRequired?: boolean;\n  password?: boolean;\n}\n\nconst defaultProps = {\n  label: '',\n  isRequired: false,\n  password: false,\n};\n\nexport default function TextField(props: TextFieldProps) {\n  const { name, label, isRequired, password, ...rest } = props;\n  const [textHidden, setTextHidden] = useState(password);\n  const [field, meta] = useField(name);\n  const { handleChange, handleBlur, setFieldTouched } = useFormikContext();\n\n  return (\n    <FormControl isRequired={isRequired} isInvalid={Boolean(meta.error)}>\n      <FormControl.Label>{label}</FormControl.Label>\n      <Input\n        testID=\"textfield-input\"\n        type={textHidden ? 'password' : 'text'}\n        value={field.value}\n        {...rest}\n        InputRightElement={\n          password ? (\n            <Button\n              variant=\"ghost\"\n              leftIcon={\n                <Icon\n                  as={Ionicons}\n                  name={textHidden ? 'eye' : 'eye-off'}\n                  size=\"xs\"\n                />\n              }\n              onPress={() => setTextHidden(!textHidden)}\n            />\n          ) : undefined\n        }\n        onChangeText={handleChange(name)}\n        onBlur={() => {\n          setFieldTouched(name);\n          handleBlur(name);\n        }}\n      />\n      {meta.error && (\n        <FormControl.ErrorMessage>{meta.error}</FormControl.ErrorMessage>\n      )}\n    </FormControl>\n  );\n}\n\nTextField.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}