{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { Heading, VStack, Button, HStack } from 'native-base';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Screen from \"../components/common/Screen\";\nimport { t } from \"../utils\";\nimport TextField from \"../components/common/form/TextField\";\nimport { AuthService } from \"../providers/AuthProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar initialValues = {\n  email: '',\n  password: ''\n};\nvar schema = Yup.object().shape({\n  email: Yup.string().required().email(t('login.emailError')).label(t('login.emailLabel')),\n  password: Yup.string().required().label(t('login.passwordLabel'))\n});\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var handleFormSubmit = function _callee(_ref2) {\n    var email, password, message;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref2.email, password = _ref2.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AuthService.signInWithEmailAndPassword(email, password));\n\n          case 4:\n            _context.next = 10;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            message = _context.t0.message;\n            console.log(message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  };\n\n  return _jsxs(Screen, {\n    children: [_jsx(Heading, {\n      size: \"lg\",\n      fontWeight: \"600\",\n      color: \"coolGray.800\",\n      children: t('login.headline')\n    }), _jsx(Heading, {\n      mt: \"1\",\n      color: \"coolGray.600\",\n      fontWeight: \"medium\",\n      size: \"xs\",\n      children: t('login.subtitle')\n    }), _jsx(Formik, {\n      validationSchema: schema,\n      initialValues: initialValues,\n      onSubmit: handleFormSubmit,\n      children: function children(_ref4) {\n        var handleSubmit = _ref4.handleSubmit,\n            isSubmitting = _ref4.isSubmitting;\n        return _jsxs(VStack, {\n          space: 3,\n          mt: \"5\",\n          children: [_jsx(TextField, {\n            name: \"email\",\n            label: t('login.emailLabel'),\n            placeholder: t('login.emailHint'),\n            isRequired: true\n          }), _jsx(TextField, {\n            name: \"password\",\n            label: t('login.passwordLabel'),\n            placeholder: t('login.passwordHint'),\n            isRequired: true,\n            password: true\n          }), _jsx(Button, {\n            mt: \"2\",\n            onPress: function onPress() {\n              return handleSubmit();\n            },\n            isLoading: isSubmitting,\n            isDisabled: isSubmitting,\n            children: t('login.login')\n          }), _jsx(HStack, {\n            mt: \"6\",\n            justifyContent: \"center\",\n            children: _jsx(Button, {\n              variant: \"link\",\n              onPress: function onPress() {\n                return navigation.navigate('Register');\n              },\n              children: t('login.register')\n            })\n          })]\n        });\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/jonathangan/Desktop/marriageRNapp/screens/LoginScreen.tsx"],"names":["React","Heading","VStack","Button","HStack","Yup","Formik","Screen","t","TextField","AuthService","initialValues","email","password","schema","object","shape","string","required","label","LoginScreen","navigation","handleFormSubmit","signInWithEmailAndPassword","message","console","log","handleSubmit","isSubmitting","navigate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,MAAlC,QAAgD,aAAhD;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP;AACA,SAASC,CAAT;AAEA,OAAOC,SAAP;AACA,SAASC,WAAT;;;AAOA,IAAMC,aAA6B,GAAG;AACpCC,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,QAAQ,EAAE;AAF0B,CAAtC;AAKA,IAAMC,MAAM,GAAGT,GAAG,CAACU,MAAJ,GAAaC,KAAb,CAAmB;AAChCJ,EAAAA,KAAK,EAAEP,GAAG,CAACY,MAAJ,GACJC,QADI,GAEJN,KAFI,CAEEJ,CAAC,CAAC,kBAAD,CAFH,EAGJW,KAHI,CAGEX,CAAC,CAAC,kBAAD,CAHH,CADyB;AAKhCK,EAAAA,QAAQ,EAAER,GAAG,CAACY,MAAJ,GAAaC,QAAb,GAAwBC,KAAxB,CAA8BX,CAAC,CAAC,qBAAD,CAA/B;AALsB,CAAnB,CAAf;AAQA,eAAe,SAASY,WAAT,OAE8C;AAAA,MAD3DC,UAC2D,QAD3DA,UAC2D;;AAC3D,MAAMC,gBAAgB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASV,YAAAA,KAAT,SAASA,KAAT,EAAgBC,QAAhB,SAAgBA,QAAhB;AAAA;AAAA;AAAA,6CAEfH,WAAW,CAACa,0BAAZ,CAAuCX,KAAvC,EAA8CC,QAA9C,CAFe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGZW,YAAAA,OAHY,eAGZA,OAHY;AAIrBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAQA,SACE,MAAC,MAAD;AAAA,eACE,KAAC,OAAD;AAAS,MAAA,IAAI,EAAC,IAAd;AAAmB,MAAA,UAAU,EAAC,KAA9B;AAAoC,MAAA,KAAK,EAAC,cAA1C;AAAA,gBACGhB,CAAC,CAAC,gBAAD;AADJ,MADF,EAIE,KAAC,OAAD;AAAS,MAAA,EAAE,EAAC,GAAZ;AAAgB,MAAA,KAAK,EAAC,cAAtB;AAAqC,MAAA,UAAU,EAAC,QAAhD;AAAyD,MAAA,IAAI,EAAC,IAA9D;AAAA,gBACGA,CAAC,CAAC,gBAAD;AADJ,MAJF,EAQE,KAAC,MAAD;AACE,MAAA,gBAAgB,EAAEM,MADpB;AAEE,MAAA,aAAa,EAAEH,aAFjB;AAGE,MAAA,QAAQ,EAAEW,gBAHZ;AAAA,gBAKG;AAAA,YAAGK,YAAH,SAAGA,YAAH;AAAA,YAAiBC,YAAjB,SAAiBA,YAAjB;AAAA,eACC,MAAC,MAAD;AAAQ,UAAA,KAAK,EAAE,CAAf;AAAkB,UAAA,EAAE,EAAC,GAArB;AAAA,qBACE,KAAC,SAAD;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,KAAK,EAAEpB,CAAC,CAAC,kBAAD,CAFV;AAGE,YAAA,WAAW,EAAEA,CAAC,CAAC,iBAAD,CAHhB;AAIE,YAAA,UAAU;AAJZ,YADF,EAOE,KAAC,SAAD;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,KAAK,EAAEA,CAAC,CAAC,qBAAD,CAFV;AAGE,YAAA,WAAW,EAAEA,CAAC,CAAC,oBAAD,CAHhB;AAIE,YAAA,UAAU,MAJZ;AAKE,YAAA,QAAQ;AALV,YAPF,EAcE,KAAC,MAAD;AACE,YAAA,EAAE,EAAC,GADL;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMmB,YAAY,EAAlB;AAAA,aAFX;AAGE,YAAA,SAAS,EAAEC,YAHb;AAIE,YAAA,UAAU,EAAEA,YAJd;AAAA,sBAMGpB,CAAC,CAAC,aAAD;AANJ,YAdF,EAsBE,KAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,GAAX;AAAe,YAAA,cAAc,EAAC,QAA9B;AAAA,sBACE,KAAC,MAAD;AACE,cAAA,OAAO,EAAC,MADV;AAEE,cAAA,OAAO,EAAE;AAAA,uBAAMa,UAAU,CAACQ,QAAX,CAAoB,UAApB,CAAN;AAAA,eAFX;AAAA,wBAIGrB,CAAC,CAAC,gBAAD;AAJJ;AADF,YAtBF;AAAA,UADD;AAAA;AALH,MARF;AAAA,IADF;AAkDD","sourcesContent":["import React from 'react';\nimport { Heading, VStack, Button, HStack } from 'native-base';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Screen from '../components/common/Screen';\nimport { t } from '../utils';\nimport { GuestNavigatorParamList } from '../navigators/GuestNavigator';\nimport TextField from '../components/common/form/TextField';\nimport { AuthService } from '../providers/AuthProvider';\n\ninterface LoginFormValue {\n  email: string;\n  password: string;\n}\n\nconst initialValues: LoginFormValue = {\n  email: '',\n  password: '',\n};\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .required()\n    .email(t('login.emailError'))\n    .label(t('login.emailLabel')),\n  password: Yup.string().required().label(t('login.passwordLabel')),\n});\n\nexport default function LoginScreen({\n  navigation,\n}: NativeStackScreenProps<GuestNavigatorParamList, 'Login'>) {\n  const handleFormSubmit = async ({ email, password }: LoginFormValue) => {\n    try {\n      await AuthService.signInWithEmailAndPassword(email, password);\n    } catch ({ message }) {\n      console.log(message);\n    }\n  };\n\n  return (\n    <Screen>\n      <Heading size=\"lg\" fontWeight=\"600\" color=\"coolGray.800\">\n        {t('login.headline')}\n      </Heading>\n      <Heading mt=\"1\" color=\"coolGray.600\" fontWeight=\"medium\" size=\"xs\">\n        {t('login.subtitle')}\n      </Heading>\n\n      <Formik\n        validationSchema={schema}\n        initialValues={initialValues}\n        onSubmit={handleFormSubmit}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <VStack space={3} mt=\"5\">\n            <TextField\n              name=\"email\"\n              label={t('login.emailLabel')}\n              placeholder={t('login.emailHint')}\n              isRequired\n            />\n            <TextField\n              name=\"password\"\n              label={t('login.passwordLabel')}\n              placeholder={t('login.passwordHint')}\n              isRequired\n              password\n            />\n            <Button\n              mt=\"2\"\n              onPress={() => handleSubmit()}\n              isLoading={isSubmitting}\n              isDisabled={isSubmitting}\n            >\n              {t('login.login')}\n            </Button>\n            <HStack mt=\"6\" justifyContent=\"center\">\n              <Button\n                variant=\"link\"\n                onPress={() => navigation.navigate('Register')}\n              >\n                {t('login.register')}\n              </Button>\n            </HStack>\n          </VStack>\n        )}\n      </Formik>\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}