{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { Heading, VStack, Button } from 'native-base';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Screen from \"../components/common/Screen\";\nimport { t } from \"../utils\";\nimport TextField from \"../components/common/form/TextField\";\nimport { AuthService } from \"../providers/AuthProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar initialValues = {\n  displayName: '',\n  email: '',\n  password: ''\n};\nvar schema = Yup.object().shape({\n  displayName: Yup.string().required().label(t('register.displayNameLabel')),\n  email: Yup.string().required().email(t('register.emailError')).label(t('register.emailLabel')),\n  password: Yup.string().required().min(6).label(t('register.passwordLabel'))\n});\nexport default function RegisterScreen() {\n  var handleFormSubmit = function _callee(_ref) {\n    var displayName, email, password, _result$user, result, message;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            displayName = _ref.displayName, email = _ref.email, password = _ref.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AuthService.createUserWithEmailAndPassword(email, password));\n\n          case 4:\n            result = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap((_result$user = result.user) == null ? void 0 : _result$user.updateProfile({\n              displayName: displayName\n            }));\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            message = _context.t0.message;\n            console.log(message);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  return _jsxs(Screen, {\n    title: t('register.title'),\n    showBackButton: true,\n    children: [_jsx(Heading, {\n      mt: \"1\",\n      color: \"coolGray.600\",\n      fontWeight: \"medium\",\n      size: \"xs\",\n      children: t('register.subtitle')\n    }), _jsx(Formik, {\n      validationSchema: schema,\n      initialValues: initialValues,\n      onSubmit: handleFormSubmit,\n      children: function children(_ref3) {\n        var handleSubmit = _ref3.handleSubmit,\n            isSubmitting = _ref3.isSubmitting;\n        return _jsxs(VStack, {\n          space: 3,\n          mt: \"5\",\n          children: [_jsx(TextField, {\n            name: \"displayName\",\n            label: t('register.displayNameLabel'),\n            placeholder: t('register.displayNameHint'),\n            isRequired: true\n          }), _jsx(TextField, {\n            name: \"email\",\n            label: t('register.emailLabel'),\n            placeholder: t('register.emailHint'),\n            isRequired: true\n          }), _jsx(TextField, {\n            name: \"password\",\n            label: t('register.passwordLabel'),\n            placeholder: t('register.passwordHint'),\n            isRequired: true,\n            password: true\n          }), _jsx(Button, {\n            mt: \"2\",\n            onPress: function onPress() {\n              return handleSubmit();\n            },\n            isLoading: isSubmitting,\n            isDisabled: isSubmitting,\n            children: t('register.register')\n          })]\n        });\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/jonathangan/Desktop/marriageRNapp/screens/RegisterScreen.tsx"],"names":["React","Heading","VStack","Button","Yup","Formik","Screen","t","TextField","AuthService","initialValues","displayName","email","password","schema","object","shape","string","required","label","min","RegisterScreen","handleFormSubmit","createUserWithEmailAndPassword","result","user","updateProfile","message","console","log","handleSubmit","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Heading, VStack, Button } from 'native-base';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Screen from '../components/common/Screen';\nimport { t } from '../utils';\nimport TextField from '../components/common/form/TextField';\nimport { AuthService } from '../providers/AuthProvider';\n\ninterface RegisterFormValue {\n  displayName: string;\n  email: string;\n  password: string;\n}\n\nconst initialValues: RegisterFormValue = {\n  displayName: '',\n  email: '',\n  password: '',\n};\n\nconst schema = Yup.object().shape({\n  displayName: Yup.string().required().label(t('register.displayNameLabel')),\n  email: Yup.string()\n    .required()\n    .email(t('register.emailError'))\n    .label(t('register.emailLabel')),\n  password: Yup.string().required().min(6).label(t('register.passwordLabel')),\n});\n\nexport default function RegisterScreen() {\n  const handleFormSubmit = async ({\n    displayName,\n    email,\n    password,\n  }: RegisterFormValue) => {\n    try {\n      const result = await AuthService.createUserWithEmailAndPassword(\n        email,\n        password,\n      );\n      await result.user?.updateProfile({ displayName });\n    } catch ({ message }) {\n      console.log(message);\n    }\n  };\n\n  return (\n    <Screen title={t('register.title')} showBackButton>\n      <Heading mt=\"1\" color=\"coolGray.600\" fontWeight=\"medium\" size=\"xs\">\n        {t('register.subtitle')}\n      </Heading>\n\n      <Formik\n        validationSchema={schema}\n        initialValues={initialValues}\n        onSubmit={handleFormSubmit}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <VStack space={3} mt=\"5\">\n            <TextField\n              name=\"displayName\"\n              label={t('register.displayNameLabel')}\n              placeholder={t('register.displayNameHint')}\n              isRequired\n            />\n            <TextField\n              name=\"email\"\n              label={t('register.emailLabel')}\n              placeholder={t('register.emailHint')}\n              isRequired\n            />\n            <TextField\n              name=\"password\"\n              label={t('register.passwordLabel')}\n              placeholder={t('register.passwordHint')}\n              isRequired\n              password\n            />\n            <Button\n              mt=\"2\"\n              onPress={() => handleSubmit()}\n              isLoading={isSubmitting}\n              isDisabled={isSubmitting}\n            >\n              {t('register.register')}\n            </Button>\n          </VStack>\n        )}\n      </Formik>\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}