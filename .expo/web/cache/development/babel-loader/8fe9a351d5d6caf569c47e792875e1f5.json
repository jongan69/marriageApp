{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { exchangeCodeAsync, useAuthRequest } from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport Button from \"./Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nWebBrowser.maybeCompleteAuthSession();\nvar CLIENT_ID = '9764f0fa31a230a5d8f4c923cee2a7066d8ada4676faf300422fa49482ef1127';\nvar discovery = {\n  authorizationEndpoint: 'https://www.coinbase.com/oauth/authorize',\n  tokenEndpoint: 'https://api.coinbase.com/oauth/token',\n  revocationEndpoint: 'https://api.coinbase.com/oauth/revoke'\n};\nvar redirectUri = 'https://192.168.1.141:19006';\n\nfunction useAutoExchange(code) {\n  var _React$useReducer = React.useReducer(function (state, action) {\n    return _objectSpread(_objectSpread({}, state), action);\n  }, {\n    token: null,\n    exchangeError: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      setState = _React$useReducer2[1];\n\n  var isMounted = useMounted();\n  React.useEffect(function () {\n    if (!code) {\n      setState({\n        token: null,\n        exchangeError: null\n      });\n      return;\n    }\n\n    exchangeCodeAsync({\n      clientId: CLIENT_ID,\n      clientSecret: '5be10d9917e2b75802b6ab89fe196004fc9e4f63ba5a0706773c3484ab75d3e4',\n      code: code,\n      redirectUri: redirectUri\n    }, discovery).then(function (token) {\n      if (isMounted.current) {\n        console.log('DATA FROM COINBASE:', token);\n        setState({\n          token: token,\n          exchangeError: null\n        });\n      }\n    }).catch(function (exchangeError) {\n      if (isMounted.current) {\n        console.log('NO DATA FROM COINBASE');\n        setState({\n          exchangeError: exchangeError,\n          token: null\n        });\n      }\n    });\n  }, [code, isMounted]);\n  return state;\n}\n\nexport default function CoinAuth() {\n  var _useAuthRequest = useAuthRequest({\n    clientId: CLIENT_ID,\n    scopes: ['wallet:accounts:read'],\n    redirectUri: redirectUri\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  var _useAutoExchange = useAutoExchange((response == null ? void 0 : response.type) === 'success' ? response.params.code : 'null'),\n      token = _useAutoExchange.token,\n      exchangeError = _useAutoExchange.exchangeError;\n\n  React.useEffect(function () {\n    if (token) {\n      console.log('TOKEN DATA:', token);\n    }\n  }, [token]);\n  return _jsx(Button, {\n    disabled: !request,\n    label: \"Login to Coinbase\",\n    onPress: function onPress() {\n      promptAsync();\n    }\n  });\n}\n\nfunction useMounted() {\n  var isMounted = React.useRef(true);\n  React.useEffect(function () {\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}","map":{"version":3,"sources":["/Users/jonathangan/Desktop/marriageRNapp/components/common/CoinAuth.tsx"],"names":["exchangeCodeAsync","useAuthRequest","WebBrowser","React","Button","maybeCompleteAuthSession","CLIENT_ID","discovery","authorizationEndpoint","tokenEndpoint","revocationEndpoint","redirectUri","useAutoExchange","code","useReducer","state","action","token","exchangeError","setState","isMounted","useMounted","useEffect","clientId","clientSecret","then","current","console","log","catch","CoinAuth","scopes","request","response","promptAsync","type","params","useRef"],"mappings":"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","sourcesContent":["import {\n  exchangeCodeAsync,\n  makeRedirectUri,\n  TokenResponse,\n  useAuthRequest,\n} from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { Alert } from 'react-native';\n// import { getAuth, linkWithCredential } from 'firebase/auth';\nimport Button from './Button';\n\nWebBrowser.maybeCompleteAuthSession();\nconst CLIENT_ID =\n  '9764f0fa31a230a5d8f4c923cee2a7066d8ada4676faf300422fa49482ef1127';\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://www.coinbase.com/oauth/authorize',\n  tokenEndpoint: 'https://api.coinbase.com/oauth/token',\n  revocationEndpoint: 'https://api.coinbase.com/oauth/revoke',\n};\n// for Expo Local\n// const redirectUri = 'https://marriage-backend.vercel.app/api/auth';\n\n// for Expo Web\nconst redirectUri = 'https://192.168.1.141:19006';\n\n// for Mobile DeepLink\n// const redirectUri = makeRedirectUri({\n//   scheme: 'com.marriagebudgeting://',\n// });\n\nfunction useAutoExchange(code?: string): State {\n  const [state, setState] = React.useReducer(\n    (state: State, action: Partial<State>) => ({ ...state, ...action }),\n    { token: null, exchangeError: null },\n  );\n  const isMounted = useMounted();\n\n  React.useEffect(() => {\n    if (!code) {\n      setState({ token: null, exchangeError: null });\n      return;\n    }\n    exchangeCodeAsync(\n      {\n        clientId: CLIENT_ID,\n        clientSecret:\n          '5be10d9917e2b75802b6ab89fe196004fc9e4f63ba5a0706773c3484ab75d3e4',\n        code,\n        redirectUri,\n      },\n      discovery,\n    )\n      .then(token => {\n        if (isMounted.current) {\n          console.log('DATA FROM COINBASE:', token);\n          setState({ token, exchangeError: null });\n        }\n      })\n      .catch(exchangeError => {\n        if (isMounted.current) {\n          console.log('NO DATA FROM COINBASE');\n          setState({ exchangeError, token: null });\n        }\n      });\n  }, [code, isMounted]);\n\n  return state;\n}\n\nexport default function CoinAuth() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: CLIENT_ID,\n      scopes: ['wallet:accounts:read'],\n      redirectUri,\n    },\n    discovery,\n  );\n  const {\n    // The token will be auto exchanged after auth completes.\n    token,\n    exchangeError,\n  } = useAutoExchange(\n    response?.type === 'success' ? response.params.code : 'null',\n  );\n\n  React.useEffect(() => {\n    if (token) {\n      console.log('TOKEN DATA:', token);\n      // const auth = getAuth();\n      // linkWithCredential(auth.currentUser, token)\n      //   .then(usercred => {\n      //     const { user } = usercred;\n      //     console.log('Anonymous account successfully upgraded', user);\n      //   })\n      //   .catch(error => {\n      //     console.log('Error upgrading anonymous account', error);\n      //   });\n    }\n  }, [token]);\n\n  return (\n    <Button\n      disabled={!request}\n      label=\"Login to Coinbase\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n\ntype State = {\n  token: TokenResponse | null;\n  exchangeError: Error | null;\n};\n\n// A hook to automatically exchange the auth token for an access token.\n// this should be performed in a server and not here in the application.\n// For educational purposes only:\n\nfunction useMounted() {\n  const isMounted = React.useRef(true);\n  React.useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\n"]},"metadata":{},"sourceType":"module"}